==================================== TODO =====================================
[cue]
. support cue file for multisession disc (SESSION directives)

. support cue file of sub-pchannel version

[image]
. support Atari Jaguar CD and PSX cheat disc (irregular data track)

. support mdf/mds (for SecuROM v4.x or higher, StarForce, CD-Cops)

. support twin sector disc (for ALPHA-ROM, ROOT, TAGES)

. support Xbox / Xbox 360 disc

[sub]
. check parity P, Q for CD+G
  https://webstore.iec.ch/publication/3885 p24
  [quote]
  19.3 Error Correction parity P
  (24, 20)Read-Solomon code over GF(2^6)
   Polynominal: P(X) = X^6 + X + 1
   1 symbol = 6 bit

   The parity matrix WHp is:
               {  1   1   1 . . .  1 1}
          Hp = {a23 a22 a21 . . . a1 1}
               {a46 a44 a42 . . . a2 1}
               {a69 a66 a63 . . . a3 1}

   The primitive element a of GF(2^6) is:

                   msb      lsb
              a = (0 0 0 0 1 0)

   The parity symbols P0 = P - S24n+20 and P1 = P - S24n+21, P2 = P - S24n+22 and P3 = P - S24n+23
   are defined to satisfy the following question:

              Hp X Vp = 0
   where
               {D - S24n}
          Vp = {D - S24n+1}
               {D - S24n+2}
               {D - S24n+3}
                  :
               {D - S24n+23}
  
  19.7 Error Correction parity Q
  (4, 2)Read-Solomon code over GF(2^6)
   Polynominal: P(X) = X^6 + X + 1
   1 symbol = 6 bit

   The parity matrix WHq is:
          Hq = { 1  1  1 1}
               {a3 a2 a1 1}

   The primitive element a of GF(2^6) is:

         msb      lsb
    a = (0 0 0 0 1 0)

   The parity symbols Q0 = D - S24n+2 and Q1 = D - S24n+3 are defined to satisfy the following
   equation:
               Hq x Vq = 0
   where
               {D - S24n}
          Vq = {D - S24n + 1}
               {D - S24n + 2}
               {D - S24n + 3}

   This Q-parity system combined with scrambling and interleaving can correct an error burst of
   59 subcoding symbols on the disc by using a single symbol correcting strategy (symbols 0, 1, 2
   and 3 only).
  [/quote]
   => ISO/IEC 10149:1995 (http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html)
      14.5 P-Parity field p17, 14.6 Q-Parity field p17, Annex A pp25-28
       This document is the specification of the CD-ROM, and these pages are described about
      EDC(Error Detection Code), ECC(Error Correction Code).
       EDC, ECC is coded by "ecm - Encoder/decoder for Error Code Modeler format" of Neill Corlett.
      So, I can use these documents and source codes as reference, but I don't understand these yet.

[other]
. support 0xd8 dumping of SONY, PIONEER
  ftp://ftp.t10.org/t10/document.95/95-104r0.pdf
  http://www.pioneerelectronics.com/pio/pe/images/portal/cit_3424/31636562SCSI-2RefManV31.pdf
   => I don't have these old drive yet.

. read lead-in precisely
  http://senbee.seesaa.net/article/20732055.html
  http://www.13thmonkey.org/documentation/SCSI/mmc6r02g.pdf p43
  [quote]
   Addressing in the program area begins with 00:00:00. This advances up through the Lead-out.
   The last frame in the Lead-in is 99:59:74 and decreases as the spiral is followed toward the center of the disc.
   The Lead-in is typically 3 to 4 minutes in length.
  [/quote]
   => I don't know the precise length of the Lead-in/out. I want the specification about the Lead-in/out.
   => I know PLEXTOR drive reads lead-in partially (about 2000 sectors) and lead-out (100 sectors - 00:01:25)
   => I know Lite-on drive reads lead-out (about 6750 sectors - 01:30:00)

. search the offsets precisely
  [quote]
  1.search sync. (IsValidMainDataHeader) "i" is 0x6c(108)
  2.get msf. (BcdToDec) "sm" is 0, "ss" is 01, "sf" is 70
  3.convert msf to lba. (00:01:70 -> 145) "tmpLBA" is -5
  4.calc offset. (2352 * -(-5 - 0) + 108 = 11868(bytes), 2967(samples)

  Well, you should additionally read the 0-(-5) sector applying the +108 offset correction and if 
  you don't get the LBA 0 header there - you need to check the nearby bytes until you find it (and modify the offset value afterwards).

  As for the problem in general (this and my Saturn examples), you may improve the offset detection the following way:

  1. Extract -5000 to 0 area into track01_pregap.bin
  2. Search for the first occurence of the LBA -150 sync (AMSF 00:00:00)
  3. Search for the following occurence of the LBA 0 sync (AMSF 00:02:00)
  4. Cut all the data before -150 and all the data starting from 0.
  5. Count the resulting size of track01_pregap.bin in bytes, then substract 150*2352. 
  If the result isn't 0 - redo all the steps, if the result is the same - report, then substract 
  the difference from the previously detected offset value. Note, that it would be the offset value to report for the disc,
   but for the dumping process itself, you should use the previously detected one. 
  As a bonus, you will have the properly dumped Track01 pregap (of course, 
  that algorythm is only correct for the discs with the first track and its pregap data, not audio.
   PCE/PC-FX/Jag discs need a different approach, as well as Audio CD ones).
  [/quote]
